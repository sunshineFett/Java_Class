<!-- saved from url=(0022)http://internet.e-mail -->
<HTML>
<HEAD>
<TITLE>Files and Streams</TITLE>
</HEAD>
<BODY><center>
<b><font face="Arial" size="4" color="Black">Files and Streams</font></b>
<br>
<b><font face="Arial" size="4" color="Black">Assignment for Lecture 7</font>
<br>
</b>
<br>
<br>
<br>
<p align="left"><b>Instructions:</b>  
   Write a program that allows you to read and write from a file. 
Use the examples from class to help you with syntax.</p>
<br>
<table>
<tr>
 <td><b>1.  </b> In order to do this assignment, you will need to use the ServerApp class 
     from Assignment 3 and the custom exception class from Assignment 6. You also
     need to use a package name for visibility reasons.  Make sure each of your classes (ServerApp, 
     ChatIOException) are within the same package:
     <b>javatraining.example.multithreads.chat</b>.  If you don't use the JBuilder Wizard to
     create your class, you will then need to create each directory corresponding 
     to each "." in the package name on
      your hard drive under your JBuilder project's /src directory.  Then, you need to 
      place all of these *.java files for these classes under 
      that /javatraining/example/multithreads/chat directory.  If you don't do this,
      you will get a compiler error.
</td>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
 <td><b>2.  </b>Import into the ServerApp class the appropriate packages you will need to access all of 
the classes to allow access to reading and writing files.</td>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
 <td><b>3.  </b>Create an overloaded constructor for the ServerApp class.  Have this
overloaded constructor take in one parameter of datatype String called "title". And,
have this overloaded constructor specify that it throws the ChatIOException.</td>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
 <td><b>4.  </b>Declare two instance variables of access modifier private.  One
variable should be of datatype BufferedReader called br and the other variable
should be of datatype BufferedWriter called bw.</td>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
 <td><b>5.  </b>Inside the overloaded constructor, create a try/catch block. Inside
the try block, instantiate the BufferedWriter and BufferedReader objects. Have the
BufferedWriter chained to the FileWriter and the BufferedReader chained
to the FileReader, passing this String literal into the constructor for each
: "c:\\temp\\myOutput.dat".  Make sure you instantiate the BufferedWriter object
first, otherwise, your program will throw a Runtime exception.  After the 
BufferedWriter object is instantiated,use this object, bw, to write this String 
out to the file: "Server writes this to a file".  Make sure you call the 
flush method as well to flush the buffer. Write a new line out to the file as well.

<br><br>
Make sure the catch statement catches an IOException.  Inside the catch block, throw
a ChatIOException passing in a specific message into its constructor. NOTE:  you
must have a directory on your c:\ drive called "temp"!</td>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr>
</tr>
<tr><td><b>6.  </b> Inside the main method, change the instantiation of the 
ServerApp object from using the default constructor, to now use the overloaded
constructor that you created in Step #3.  Pass in this string literal "Server" into
the overloaded constructor for ServerApp.  NOTE:  you must put this instantiation
within a try/catch block catching the ChatIOException.</td></tr>
<tr>
</tr>
<tr>
<tr>
 <td><b>7.</b> Within the main method, go to the while loop.  Create another try/catch block
within this while loop to catch an IOException.  Inside the try block, access
the BufferedReader object, br, by using the instance of the ServerApp class.  Using
the br object, call it's readLine() method which returns a String.  Print this
String out to the console.<font color="Blue">  </td></tr>
<tr>
</tr>
<tr>
<tr>
 <td><b>8.</b> To test your program, run the ServerApp class and verify that
the following String is printed to the console and is written to the "myOutput.dat"
file located under c:\temp directory:  "Server writes this to a file".  </td></tr>
<tr>
</tr>
<tr>
<td><b>9.</b> Compile and run your code.  Email the ServerApp.java file to
the teacher.<font color="Purple"> </font> 
<td>
</tr>
</table>
</BODY>
</HTML>